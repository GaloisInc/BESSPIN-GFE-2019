#!/bin/bash

arch=${1:-rv32im}

if [[ $arch =~ ^rv(32|64)((i?m?a?f?d?|g?)c?)(s?u?)$ ]]; then
    xlen=${BASH_REMATCH[1]}
    isa=${BASH_REMATCH[2]}
    priv=${BASH_REMATCH[4]}
    if [[ $isa =~ ^(.*)g(.*)$ ]]; then
	isa=${BASH_REMATCH[1]}imafd${BASH_REMATCH[2]}
    fi
    if [[ $priv =~ s ]]; then
	env="p v"
    else
	env="p"
    fi
else
    echo "ERROR: unknown or unsupported architecture ($arch)" >&2
    exit 1
fi

test_dir=`dirname $0`/../../riscv-tests

cat <<EOF
# -*- gdb-script -*-
# this file was automatically generated by gen-test-all
# for architecture $arch

set remotetimeout 5000
set remotelogfile gdb-remote.log
set logging overwrite
set logging file gdb-client.log
set logging on
set pagination off

target remote | openocd --debug --log_output openocd.log --command "gdb_port pipe" --file `dirname $0`/../targets/ssith_gfe.cfg

define soft_reset
  set *((int *) 0x6FFF0000) = 1
end

define run_prog
  dont-repeat

  soft_reset

  monitor reset halt

  delete
  printf "Loading \$arg0\\n"
  file \$arg0
  load

  break exit
  commands
    info registers
  end

  continue

end

define run_test_p
  dont-repeat

  soft_reset
  monitor reset halt

  delete
  printf "Loading \$arg0\\n"
  file \$arg0
  load


  break write_tohost
  commands
    if \$gp == 1
      printf "PASS\\n"
    else
      printf "FAIL (tohost=%x)\\n", \$gp
    end
  end

  continue

end

define run_test_v
  dont-repeat

  soft_reset
  monitor reset halt

  delete
  printf "Loading \$arg0\\n"
  file \$arg0
  load

  break terminate
  commands
    if \$a0 == 1
      printf "PASS\\n"
    else
      printf "FAIL (tohost=%x)\\n", \$a0
    end
  end

  continue

  if \$a0 == 1
    printf "PASS\\n"
  else
    printf "FAIL (tohost=%x)\\n", \$a0
  end

end

EOF

for e in $env; do
    echo "# for e = $e"
    for f in `ls $test_dir/isa/rv$xlen[m$priv][$isa]-$e-* | grep -vE ".dump$" | sort`; do
       echo "run_test_$e $f"
    done

    echo
    echo soft_reset
done

cat <<EOF
disconnect
quit
EOF
