//
// Generated by Bluespec Compiler, version 2017.07.A (build e1df8052c, 2017-07-21)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_addr_map               O     1 const
// slave_awready                  O     1 reg
// slave_wready                   O     1 reg
// slave_bvalid                   O     1 reg
// slave_bid                      O     4 reg
// slave_bresp                    O     2 reg
// slave_arready                  O     1 reg
// slave_rvalid                   O     1 reg
// slave_rid                      O     4 reg
// slave_rdata                    O    64 reg
// slave_rresp                    O     2 reg
// slave_rlast                    O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_addr_map_addr_base         I    64 reg
// set_addr_map_addr_lim          I    64 reg
// slave_awvalid                  I     1
// slave_awid                     I     4 reg
// slave_awaddr                   I    64 reg
// slave_awlen                    I     8 reg
// slave_awsize                   I     3 reg
// slave_awburst                  I     2 reg
// slave_awlock                   I     1 reg
// slave_awcache                  I     4 reg
// slave_awprot                   I     3 reg
// slave_awqos                    I     4 reg
// slave_awregion                 I     4 reg
// slave_wvalid                   I     1
// slave_wdata                    I    64 reg
// slave_wstrb                    I     8 reg
// slave_wlast                    I     1 reg
// slave_bready                   I     1
// slave_arvalid                  I     1
// slave_arid                     I     4 reg
// slave_araddr                   I    64 reg
// slave_arlen                    I     8 reg
// slave_arsize                   I     3 reg
// slave_arburst                  I     2 reg
// slave_arlock                   I     1 reg
// slave_arcache                  I     4 reg
// slave_arprot                   I     3 reg
// slave_arqos                    I     4 reg
// slave_arregion                 I     4 reg
// slave_rready                   I     1
// EN_set_addr_map                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFlash(CLK,
	       RST_N,

	       set_addr_map_addr_base,
	       set_addr_map_addr_lim,
	       EN_set_addr_map,
	       RDY_set_addr_map,

	       slave_awvalid,
	       slave_awid,
	       slave_awaddr,
	       slave_awlen,
	       slave_awsize,
	       slave_awburst,
	       slave_awlock,
	       slave_awcache,
	       slave_awprot,
	       slave_awqos,
	       slave_awregion,

	       slave_awready,

	       slave_wvalid,
	       slave_wdata,
	       slave_wstrb,
	       slave_wlast,

	       slave_wready,

	       slave_bvalid,

	       slave_bid,

	       slave_bresp,

	       slave_bready,

	       slave_arvalid,
	       slave_arid,
	       slave_araddr,
	       slave_arlen,
	       slave_arsize,
	       slave_arburst,
	       slave_arlock,
	       slave_arcache,
	       slave_arprot,
	       slave_arqos,
	       slave_arregion,

	       slave_arready,

	       slave_rvalid,

	       slave_rid,

	       slave_rdata,

	       slave_rresp,

	       slave_rlast,

	       slave_rready);
  input  CLK;
  input  RST_N;

  // action method set_addr_map
  input  [63 : 0] set_addr_map_addr_base;
  input  [63 : 0] set_addr_map_addr_lim;
  input  EN_set_addr_map;
  output RDY_set_addr_map;

  // action method slave_m_awvalid
  input  slave_awvalid;
  input  [3 : 0] slave_awid;
  input  [63 : 0] slave_awaddr;
  input  [7 : 0] slave_awlen;
  input  [2 : 0] slave_awsize;
  input  [1 : 0] slave_awburst;
  input  slave_awlock;
  input  [3 : 0] slave_awcache;
  input  [2 : 0] slave_awprot;
  input  [3 : 0] slave_awqos;
  input  [3 : 0] slave_awregion;

  // value method slave_m_awready
  output slave_awready;

  // action method slave_m_wvalid
  input  slave_wvalid;
  input  [63 : 0] slave_wdata;
  input  [7 : 0] slave_wstrb;
  input  slave_wlast;

  // value method slave_m_wready
  output slave_wready;

  // value method slave_m_bvalid
  output slave_bvalid;

  // value method slave_m_bid
  output [3 : 0] slave_bid;

  // value method slave_m_bresp
  output [1 : 0] slave_bresp;

  // value method slave_m_buser

  // action method slave_m_bready
  input  slave_bready;

  // action method slave_m_arvalid
  input  slave_arvalid;
  input  [3 : 0] slave_arid;
  input  [63 : 0] slave_araddr;
  input  [7 : 0] slave_arlen;
  input  [2 : 0] slave_arsize;
  input  [1 : 0] slave_arburst;
  input  slave_arlock;
  input  [3 : 0] slave_arcache;
  input  [2 : 0] slave_arprot;
  input  [3 : 0] slave_arqos;
  input  [3 : 0] slave_arregion;

  // value method slave_m_arready
  output slave_arready;

  // value method slave_m_rvalid
  output slave_rvalid;

  // value method slave_m_rid
  output [3 : 0] slave_rid;

  // value method slave_m_rdata
  output [63 : 0] slave_rdata;

  // value method slave_m_rresp
  output [1 : 0] slave_rresp;

  // value method slave_m_rlast
  output slave_rlast;

  // value method slave_m_ruser

  // action method slave_m_rready
  input  slave_rready;

  // signals for module outputs
  wire [63 : 0] slave_rdata;
  wire [3 : 0] slave_bid, slave_rid;
  wire [1 : 0] slave_bresp, slave_rresp;
  wire RDY_set_addr_map,
       slave_arready,
       slave_awready,
       slave_bvalid,
       slave_rlast,
       slave_rvalid,
       slave_wready;

  // register rg_addr_base
  reg [63 : 0] rg_addr_base;
  wire [63 : 0] rg_addr_base$D_IN;
  wire rg_addr_base$EN;

  // register rg_addr_lim
  reg [63 : 0] rg_addr_lim;
  wire [63 : 0] rg_addr_lim$D_IN;
  wire rg_addr_lim$EN;

  // register rg_module_ready
  reg rg_module_ready;
  wire rg_module_ready$D_IN, rg_module_ready$EN;

  // ports of submodule slave_xactor_f_rd_addr
  wire [96 : 0] slave_xactor_f_rd_addr$D_IN, slave_xactor_f_rd_addr$D_OUT;
  wire slave_xactor_f_rd_addr$CLR,
       slave_xactor_f_rd_addr$DEQ,
       slave_xactor_f_rd_addr$EMPTY_N,
       slave_xactor_f_rd_addr$ENQ,
       slave_xactor_f_rd_addr$FULL_N;

  // ports of submodule slave_xactor_f_rd_data
  wire [70 : 0] slave_xactor_f_rd_data$D_IN, slave_xactor_f_rd_data$D_OUT;
  wire slave_xactor_f_rd_data$CLR,
       slave_xactor_f_rd_data$DEQ,
       slave_xactor_f_rd_data$EMPTY_N,
       slave_xactor_f_rd_data$ENQ,
       slave_xactor_f_rd_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_addr
  wire [96 : 0] slave_xactor_f_wr_addr$D_IN, slave_xactor_f_wr_addr$D_OUT;
  wire slave_xactor_f_wr_addr$CLR,
       slave_xactor_f_wr_addr$DEQ,
       slave_xactor_f_wr_addr$EMPTY_N,
       slave_xactor_f_wr_addr$ENQ,
       slave_xactor_f_wr_addr$FULL_N;

  // ports of submodule slave_xactor_f_wr_data
  wire [72 : 0] slave_xactor_f_wr_data$D_IN;
  wire slave_xactor_f_wr_data$CLR,
       slave_xactor_f_wr_data$DEQ,
       slave_xactor_f_wr_data$EMPTY_N,
       slave_xactor_f_wr_data$ENQ,
       slave_xactor_f_wr_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_resp
  wire [5 : 0] slave_xactor_f_wr_resp$D_IN, slave_xactor_f_wr_resp$D_OUT;
  wire slave_xactor_f_wr_resp$CLR,
       slave_xactor_f_wr_resp$DEQ,
       slave_xactor_f_wr_resp$EMPTY_N,
       slave_xactor_f_wr_resp$ENQ,
       slave_xactor_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_rl_process_rd_req, WILL_FIRE_RL_rl_process_wr_req;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h888;
  reg [31 : 0] v__h8626;
  reg [31 : 0] v__h8915;
  reg [31 : 0] v__h9025;
  reg [31 : 0] v__h882;
  reg [31 : 0] v__h8620;
  reg [31 : 0] v__h8909;
  reg [31 : 0] v__h9019;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] data64__h708;
  reg [31 : 0] CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2,
	       CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3;
  reg CASE_slave_xactor_f_rd_addrD_OUT_BITS_20_TO_1_ETC__q4,
      CASE_slave_xactor_f_wr_addrD_OUT_BITS_20_TO_1_ETC__q5;
  wire [63 : 0] data64__h862,
		rdata__h1000,
		slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_MIN_ETC__q1;
  wire [7 : 0] x__h8272;
  wire [1 : 0] rdr_rresp__h1033;
  wire IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31,
       IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241;

  // action method set_addr_map
  assign RDY_set_addr_map = 1'd1 ;

  // value method slave_m_awready
  assign slave_awready = slave_xactor_f_wr_addr$FULL_N ;

  // value method slave_m_wready
  assign slave_wready = slave_xactor_f_wr_data$FULL_N ;

  // value method slave_m_bvalid
  assign slave_bvalid = slave_xactor_f_wr_resp$EMPTY_N ;

  // value method slave_m_bid
  assign slave_bid = slave_xactor_f_wr_resp$D_OUT[5:2] ;

  // value method slave_m_bresp
  assign slave_bresp = slave_xactor_f_wr_resp$D_OUT[1:0] ;

  // value method slave_m_arready
  assign slave_arready = slave_xactor_f_rd_addr$FULL_N ;

  // value method slave_m_rvalid
  assign slave_rvalid = slave_xactor_f_rd_data$EMPTY_N ;

  // value method slave_m_rid
  assign slave_rid = slave_xactor_f_rd_data$D_OUT[70:67] ;

  // value method slave_m_rdata
  assign slave_rdata = slave_xactor_f_rd_data$D_OUT[66:3] ;

  // value method slave_m_rresp
  assign slave_rresp = slave_xactor_f_rd_data$D_OUT[2:1] ;

  // value method slave_m_rlast
  assign slave_rlast = slave_xactor_f_rd_data$D_OUT[0] ;

  // submodule slave_xactor_f_rd_addr
  FIFO2 #(.width(32'd97), .guarded(32'd1)) slave_xactor_f_rd_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_rd_addr$D_IN),
								  .ENQ(slave_xactor_f_rd_addr$ENQ),
								  .DEQ(slave_xactor_f_rd_addr$DEQ),
								  .CLR(slave_xactor_f_rd_addr$CLR),
								  .D_OUT(slave_xactor_f_rd_addr$D_OUT),
								  .FULL_N(slave_xactor_f_rd_addr$FULL_N),
								  .EMPTY_N(slave_xactor_f_rd_addr$EMPTY_N));

  // submodule slave_xactor_f_rd_data
  FIFO2 #(.width(32'd71), .guarded(32'd1)) slave_xactor_f_rd_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_rd_data$D_IN),
								  .ENQ(slave_xactor_f_rd_data$ENQ),
								  .DEQ(slave_xactor_f_rd_data$DEQ),
								  .CLR(slave_xactor_f_rd_data$CLR),
								  .D_OUT(slave_xactor_f_rd_data$D_OUT),
								  .FULL_N(slave_xactor_f_rd_data$FULL_N),
								  .EMPTY_N(slave_xactor_f_rd_data$EMPTY_N));

  // submodule slave_xactor_f_wr_addr
  FIFO2 #(.width(32'd97), .guarded(32'd1)) slave_xactor_f_wr_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_wr_addr$D_IN),
								  .ENQ(slave_xactor_f_wr_addr$ENQ),
								  .DEQ(slave_xactor_f_wr_addr$DEQ),
								  .CLR(slave_xactor_f_wr_addr$CLR),
								  .D_OUT(slave_xactor_f_wr_addr$D_OUT),
								  .FULL_N(slave_xactor_f_wr_addr$FULL_N),
								  .EMPTY_N(slave_xactor_f_wr_addr$EMPTY_N));

  // submodule slave_xactor_f_wr_data
  FIFO2 #(.width(32'd73), .guarded(32'd1)) slave_xactor_f_wr_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_wr_data$D_IN),
								  .ENQ(slave_xactor_f_wr_data$ENQ),
								  .DEQ(slave_xactor_f_wr_data$DEQ),
								  .CLR(slave_xactor_f_wr_data$CLR),
								  .D_OUT(),
								  .FULL_N(slave_xactor_f_wr_data$FULL_N),
								  .EMPTY_N(slave_xactor_f_wr_data$EMPTY_N));

  // submodule slave_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) slave_xactor_f_wr_resp(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(slave_xactor_f_wr_resp$D_IN),
								 .ENQ(slave_xactor_f_wr_resp$ENQ),
								 .DEQ(slave_xactor_f_wr_resp$DEQ),
								 .CLR(slave_xactor_f_wr_resp$CLR),
								 .D_OUT(slave_xactor_f_wr_resp$D_OUT),
								 .FULL_N(slave_xactor_f_wr_resp$FULL_N),
								 .EMPTY_N(slave_xactor_f_wr_resp$EMPTY_N));

  // rule RL_rl_process_rd_req
  assign WILL_FIRE_RL_rl_process_rd_req =
	     slave_xactor_f_rd_addr$EMPTY_N &&
	     slave_xactor_f_rd_data$FULL_N &&
	     rg_module_ready ;

  // rule RL_rl_process_wr_req
  assign WILL_FIRE_RL_rl_process_wr_req =
	     slave_xactor_f_wr_addr$EMPTY_N &&
	     slave_xactor_f_wr_data$EMPTY_N &&
	     slave_xactor_f_wr_resp$FULL_N &&
	     rg_module_ready ;

  // register rg_addr_base
  assign rg_addr_base$D_IN = set_addr_map_addr_base ;
  assign rg_addr_base$EN = EN_set_addr_map ;

  // register rg_addr_lim
  assign rg_addr_lim$D_IN = set_addr_map_addr_lim ;
  assign rg_addr_lim$EN = EN_set_addr_map ;

  // register rg_module_ready
  assign rg_module_ready$D_IN = 1'd1 ;
  assign rg_module_ready$EN = EN_set_addr_map ;

  // submodule slave_xactor_f_rd_addr
  assign slave_xactor_f_rd_addr$D_IN =
	     { slave_arid,
	       slave_araddr,
	       slave_arlen,
	       slave_arsize,
	       slave_arburst,
	       slave_arlock,
	       slave_arcache,
	       slave_arprot,
	       slave_arqos,
	       slave_arregion } ;
  assign slave_xactor_f_rd_addr$ENQ =
	     slave_arvalid && slave_xactor_f_rd_addr$FULL_N ;
  assign slave_xactor_f_rd_addr$DEQ = WILL_FIRE_RL_rl_process_rd_req ;
  assign slave_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule slave_xactor_f_rd_data
  assign slave_xactor_f_rd_data$D_IN =
	     { slave_xactor_f_rd_addr$D_OUT[96:93],
	       rdata__h1000,
	       rdr_rresp__h1033,
	       1'd1 } ;
  assign slave_xactor_f_rd_data$ENQ = WILL_FIRE_RL_rl_process_rd_req ;
  assign slave_xactor_f_rd_data$DEQ =
	     slave_rready && slave_xactor_f_rd_data$EMPTY_N ;
  assign slave_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_addr
  assign slave_xactor_f_wr_addr$D_IN =
	     { slave_awid,
	       slave_awaddr,
	       slave_awlen,
	       slave_awsize,
	       slave_awburst,
	       slave_awlock,
	       slave_awcache,
	       slave_awprot,
	       slave_awqos,
	       slave_awregion } ;
  assign slave_xactor_f_wr_addr$ENQ =
	     slave_awvalid && slave_xactor_f_wr_addr$FULL_N ;
  assign slave_xactor_f_wr_addr$DEQ = WILL_FIRE_RL_rl_process_wr_req ;
  assign slave_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_data
  assign slave_xactor_f_wr_data$D_IN =
	     { slave_wdata, slave_wstrb, slave_wlast } ;
  assign slave_xactor_f_wr_data$ENQ =
	     slave_wvalid && slave_xactor_f_wr_data$FULL_N ;
  assign slave_xactor_f_wr_data$DEQ = WILL_FIRE_RL_rl_process_wr_req ;
  assign slave_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_resp
  assign slave_xactor_f_wr_resp$D_IN =
	     { slave_xactor_f_wr_addr$D_OUT[96:93],
	       IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241 ?
		 2'b10 :
		 2'b0 } ;
  assign slave_xactor_f_wr_resp$ENQ = WILL_FIRE_RL_rl_process_wr_req ;
  assign slave_xactor_f_wr_resp$DEQ =
	     slave_bready && slave_xactor_f_wr_resp$EMPTY_N ;
  assign slave_xactor_f_wr_resp$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31 =
	     CASE_slave_xactor_f_rd_addrD_OUT_BITS_20_TO_1_ETC__q4 ||
	     rg_addr_base > slave_xactor_f_rd_addr$D_OUT[92:29] ||
	     slave_xactor_f_rd_addr$D_OUT[92:29] >= rg_addr_lim ;
  assign IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241 =
	     CASE_slave_xactor_f_wr_addrD_OUT_BITS_20_TO_1_ETC__q5 ||
	     rg_addr_base > slave_xactor_f_wr_addr$D_OUT[92:29] ||
	     slave_xactor_f_wr_addr$D_OUT[92:29] >= rg_addr_lim ;
  assign data64__h862 = data64__h708 >> x__h8272 ;
  assign rdata__h1000 =
	     IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31 ?
	       data64__h708 :
	       data64__h862 ;
  assign rdr_rresp__h1033 =
	     IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31 ?
	       2'b10 :
	       2'b0 ;
  assign slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_MIN_ETC__q1 =
	     slave_xactor_f_rd_addr$D_OUT[92:29] - rg_addr_base ;
  assign x__h8272 = { 2'd0, slave_xactor_f_rd_addr$D_OUT[31:29], 3'd0 } ;
  always@(slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_MIN_ETC__q1)
  begin
    case (slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_MIN_ETC__q1[63:3])
      61'd8388610,
      61'd8388611,
      61'd8388615,
      61'd8388617,
      61'd8388618,
      61'd8388619,
      61'd8388633,
      61'd8388637,
      61'd8388647,
      61'd8388661,
      61'd8388664,
      61'd8388683,
      61'd8388699,
      61'd8388748,
      61'd8388749,
      61'd8388750,
      61'd8388751,
      61'd8388752,
      61'd8388753,
      61'd8388754,
      61'd8388755,
      61'd8388756,
      61'd8388757,
      61'd8388758,
      61'd8388759,
      61'd8388760,
      61'd8388761,
      61'd8388762,
      61'd8388763,
      61'd8388764,
      61'd8388765,
      61'd8388766,
      61'd8388767,
      61'd8388768,
      61'd8388769,
      61'd8388770,
      61'd8388771,
      61'd8388772,
      61'd8388773,
      61'd8388774,
      61'd8388775,
      61'd8388776,
      61'd8388777,
      61'd8388778,
      61'd8388779,
      61'd8388780,
      61'd8388781,
      61'd8388782,
      61'd8388783,
      61'd8388784,
      61'd8388785,
      61'd8388786,
      61'd8388787,
      61'd8388788,
      61'd8388789,
      61'd8388790,
      61'd8388791,
      61'd8388792,
      61'd8388793,
      61'd8388794,
      61'd8388795,
      61'd8388796,
      61'd8388797,
      61'd8388798,
      61'd8388799,
      61'd8388800,
      61'd8388801,
      61'd8388802,
      61'd8388803,
      61'd8388804,
      61'd8388805,
      61'd8388806,
      61'd8388807,
      61'd8388808,
      61'd8388809,
      61'd8388810,
      61'd8388811,
      61'd8388812,
      61'd8388813,
      61'd8388814,
      61'd8388815,
      61'd8388816,
      61'd8388817,
      61'd8388818,
      61'd8388819,
      61'd8388820,
      61'd8388821,
      61'd8388822,
      61'd8388823,
      61'd8388824,
      61'd8388825,
      61'd8388826,
      61'd8388827,
      61'd8388828,
      61'd8388829,
      61'd8388830,
      61'd8388831,
      61'd8388832,
      61'd8388833,
      61'd8388834,
      61'd8388835,
      61'd8388836,
      61'd8388837,
      61'd8388838,
      61'd8388839,
      61'd8388840,
      61'd8388841,
      61'd8388842,
      61'd8388843,
      61'd8388844,
      61'd8388845,
      61'd8388846,
      61'd8388847,
      61'd8388848,
      61'd8388849,
      61'd8388850,
      61'd8388851,
      61'd8388852,
      61'd8388853,
      61'd8388854,
      61'd8388855,
      61'd8388856,
      61'd8388857,
      61'd8388858,
      61'd8388859,
      61'd8388860,
      61'd8388861,
      61'd8388862,
      61'd8388863,
      61'd8388864,
      61'd8388865,
      61'd8388866,
      61'd8388867,
      61'd8388868,
      61'd8388869,
      61'd8388870,
      61'd8388871,
      61'd8388872,
      61'd8388873,
      61'd8388874,
      61'd8388875,
      61'd8388876,
      61'd8388877,
      61'd8388878,
      61'd8388879,
      61'd8388880,
      61'd8388881,
      61'd8388882,
      61'd8388883,
      61'd8388884,
      61'd8388885,
      61'd8388886,
      61'd8388887,
      61'd8388888,
      61'd8388889,
      61'd8388890,
      61'd8388891,
      61'd8388892,
      61'd8388893,
      61'd8388894,
      61'd8388895,
      61'd8388896,
      61'd8388897,
      61'd8388898,
      61'd8388899,
      61'd8388900,
      61'd8388901,
      61'd8388902,
      61'd8388903,
      61'd8388904,
      61'd8388905,
      61'd8388906,
      61'd8388907,
      61'd8388908,
      61'd8388909,
      61'd8388910,
      61'd8388911,
      61'd8388912,
      61'd8388913,
      61'd8388914,
      61'd8388915,
      61'd8388916,
      61'd8388917,
      61'd8388918,
      61'd8388919,
      61'd8388920,
      61'd8388921,
      61'd8388922,
      61'd8388923,
      61'd8388924,
      61'd8388925,
      61'd8388926,
      61'd8388927,
      61'd8388928,
      61'd8388929,
      61'd8388930,
      61'd8388931,
      61'd8388932,
      61'd8388933,
      61'd8388934,
      61'd8388935,
      61'd8388936,
      61'd8388937,
      61'd8388938,
      61'd8388939,
      61'd8388940,
      61'd8388941,
      61'd8388942,
      61'd8388943,
      61'd8388944,
      61'd8388945,
      61'd8388946,
      61'd8388947,
      61'd8388948,
      61'd8388949,
      61'd8388950,
      61'd8388951,
      61'd8388952,
      61'd8388953,
      61'd8388954,
      61'd8388955,
      61'd8388956,
      61'd8388957,
      61'd8388958,
      61'd8388959,
      61'd8388960,
      61'd8388961,
      61'd8388962,
      61'd8388963,
      61'd8388964,
      61'd8388965,
      61'd8388966,
      61'd8388967,
      61'd8388968,
      61'd8388969,
      61'd8388970,
      61'd8388971,
      61'd8388972,
      61'd8388973,
      61'd8388974,
      61'd8388975,
      61'd8388976,
      61'd8388977,
      61'd8388978,
      61'd8388979,
      61'd8388980,
      61'd8388981,
      61'd8388982,
      61'd8388983,
      61'd8388984,
      61'd8388985,
      61'd8388986,
      61'd8388987,
      61'd8388988,
      61'd8388989,
      61'd8388990,
      61'd8388991,
      61'd8388992,
      61'd8388993,
      61'd8388994,
      61'd8388995,
      61'd8388996,
      61'd8388997,
      61'd8388998,
      61'd8388999,
      61'd8389000,
      61'd8389001,
      61'd8389002,
      61'd8389003,
      61'd8389004,
      61'd8389005,
      61'd8389006,
      61'd8389007,
      61'd8389008,
      61'd8389009,
      61'd8389010,
      61'd8389011,
      61'd8389012,
      61'd8389013,
      61'd8389014,
      61'd8389015,
      61'd8389016,
      61'd8389017,
      61'd8389018,
      61'd8389019,
      61'd8389020,
      61'd8389021,
      61'd8389022,
      61'd8389023,
      61'd8389024,
      61'd8389025,
      61'd8389026,
      61'd8389027,
      61'd8389028,
      61'd8389029,
      61'd8389030,
      61'd8389031,
      61'd8389032,
      61'd8389033,
      61'd8389034,
      61'd8389035,
      61'd8389036,
      61'd8389037,
      61'd8389038,
      61'd8389039,
      61'd8389040,
      61'd8389041,
      61'd8389042,
      61'd8389043,
      61'd8389044,
      61'd8389045,
      61'd8389046,
      61'd8389047,
      61'd8389048,
      61'd8389049,
      61'd8389050,
      61'd8389051,
      61'd8389052,
      61'd8389053,
      61'd8389054,
      61'd8389055,
      61'd8389056,
      61'd8389057,
      61'd8389058,
      61'd8389059,
      61'd8389060,
      61'd8389061,
      61'd8389062,
      61'd8389063,
      61'd8389064,
      61'd8389065,
      61'd8389066,
      61'd8389067,
      61'd8389068,
      61'd8389069,
      61'd8389070,
      61'd8389071,
      61'd8389072,
      61'd8389073,
      61'd8389074,
      61'd8389075,
      61'd8389076,
      61'd8389077,
      61'd8389078,
      61'd8389079,
      61'd8389080,
      61'd8389081,
      61'd8389082,
      61'd8389083,
      61'd8389084,
      61'd8389085,
      61'd8389086,
      61'd8389087,
      61'd8389088,
      61'd8389089,
      61'd8389090,
      61'd8389091,
      61'd8389092,
      61'd8389093,
      61'd8389094,
      61'd8389095,
      61'd8389096,
      61'd8389097,
      61'd8389098,
      61'd8389099,
      61'd8389100,
      61'd8389101,
      61'd8389102,
      61'd8389103,
      61'd8389104,
      61'd8389105,
      61'd8389106,
      61'd8389107,
      61'd8389108,
      61'd8389109,
      61'd8389110,
      61'd8389111,
      61'd8389112,
      61'd8389113,
      61'd8389114,
      61'd8389115,
      61'd8389116,
      61'd8389117,
      61'd8389118,
      61'd8389119:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 = 32'h0;
      61'd8388612:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h40040000;
      61'd8388613:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h74030000;
      61'd8388614:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h11000000;
      61'd8388616:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h3C030000;
      61'd8388620,
      61'd8388622,
      61'd8388634,
      61'd8388636,
      61'd8388638,
      61'd8388662,
      61'd8388669,
      61'd8388717,
      61'd8388719:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h04000000;
      61'd8388621, 61'd8388623, 61'd8388671, 61'd8388707, 61'd8388721:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h02000000;
      61'd8388624:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h16000000;
      61'd8388625:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h62626375;
      61'd8388626:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h656B6970;
      61'd8388627:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h65642D65;
      61'd8388628,
      61'd8388641,
      61'd8388643,
      61'd8388645,
      61'd8388650,
      61'd8388653,
      61'd8388656,
      61'd8388665,
      61'd8388677,
      61'd8388682,
      61'd8388684,
      61'd8388686,
      61'd8388692,
      61'd8388696,
      61'd8388703,
      61'd8388710,
      61'd8388713,
      61'd8388718:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h03000000;
      61'd8388629:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h26000000;
      61'd8388630, 61'd8388688:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h732C7261;
      61'd8388631, 61'd8388689:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h7261622D;
      61'd8388632,
      61'd8388635,
      61'd8388658,
      61'd8388663,
      61'd8388670,
      61'd8388672,
      61'd8388681,
      61'd8388701,
      61'd8388702:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h01000000;
      61'd8388639, 61'd8388720:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h50C30000;
      61'd8388640:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h40757063;
      61'd8388642:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h3F000000;
      61'd8388644, 61'd8388678, 61'd8388704, 61'd8388714:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h4B000000;
      61'd8388646:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h4F000000;
      61'd8388648:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h06000000;
      61'd8388649:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h63736972;
      61'd8388651:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h56000000;
      61'd8388652:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h75616D69;
      61'd8388654:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h60000000;
      61'd8388655:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h76732C76;
      61'd8388657:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h69000000;
      61'd8388659:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h70757272;
      61'd8388660:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h6F72746E;
      61'd8388666, 61'd8388687, 61'd8388697, 61'd8388711:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h1B000000;
      61'd8388667:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h70632C76;
      61'd8388668:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h00006374;
      61'd8388673:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h38407972;
      61'd8388674:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h00303030;
      61'd8388675:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h07000000;
      61'd8388676:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h6F6D656D;
      61'd8388679, 61'd8388680:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h00000080;
      61'd8388685:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h0F000000;
      61'd8388690:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h69730063;
      61'd8388691:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h7375622D;
      61'd8388693:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'hA7000000;
      61'd8388694:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h6E696C63;
      61'd8388695, 61'd8388709:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h30303030;
      61'd8388698:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h6C632C76;
      61'd8388700:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h10000000;
      61'd8388705:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h00000002;
      61'd8388706:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h00000C00;
      61'd8388708:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h74726175;
      61'd8388712:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h61303535;
      61'd8388715:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h000000C0;
      61'd8388716:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h08000000;
      61'd8388722:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h64646123;
      61'd8388723:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h6C65632D;
      61'd8388724:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h657A6973;
      61'd8388725:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h6300736C;
      61'd8388726:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h6C626974;
      61'd8388727:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h006C6564;
      61'd8388728:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h65736162;
      61'd8388729:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h6E657571;
      61'd8388730:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h63697665;
      61'd8388731:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h72006570;
      61'd8388732:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h75746174;
      61'd8388733:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h2C766373;
      61'd8388734:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h2D756D6D;
      61'd8388735:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h6F6C6300;
      61'd8388736:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h75716572;
      61'd8388737:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h6E692300;
      61'd8388738, 61'd8388740:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h2D747075;
      61'd8388739:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h6E690073;
      61'd8388741:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h6C6C6F72;
      61'd8388742:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h646E6168;
      61'd8388743:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h65676E61;
      61'd8388744:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h72726574;
      61'd8388745:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h7478652D;
      61'd8388746:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h65720064;
      61'd8388747:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
	      32'h00746669;
      default: CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 =
		   32'hAAAAAAAA;
    endcase
  end
  always@(slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_MIN_ETC__q1)
  begin
    case (slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_MIN_ETC__q1[63:3])
      61'd8388610:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h00028067;
      61'd8388611:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'hC0000000;
      61'd8388612:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'hEDFE0DD0;
      61'd8388613:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h38000000;
      61'd8388614:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h28000000;
      61'd8388615, 61'd8388678, 61'd8388704, 61'd8388714:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h10000000;
      61'd8388616:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'hCC000000;
      61'd8388617,
      61'd8388618,
      61'd8388621,
      61'd8388635,
      61'd8388645,
      61'd8388679,
      61'd8388680,
      61'd8388692,
      61'd8388693,
      61'd8388705,
      61'd8388706,
      61'd8388713,
      61'd8388715,
      61'd8388716,
      61'd8388748,
      61'd8388749,
      61'd8388750,
      61'd8388751,
      61'd8388752,
      61'd8388753,
      61'd8388754,
      61'd8388755,
      61'd8388756,
      61'd8388757,
      61'd8388758,
      61'd8388759,
      61'd8388760,
      61'd8388761,
      61'd8388762,
      61'd8388763,
      61'd8388764,
      61'd8388765,
      61'd8388766,
      61'd8388767,
      61'd8388768,
      61'd8388769,
      61'd8388770,
      61'd8388771,
      61'd8388772,
      61'd8388773,
      61'd8388774,
      61'd8388775,
      61'd8388776,
      61'd8388777,
      61'd8388778,
      61'd8388779,
      61'd8388780,
      61'd8388781,
      61'd8388782,
      61'd8388783,
      61'd8388784,
      61'd8388785,
      61'd8388786,
      61'd8388787,
      61'd8388788,
      61'd8388789,
      61'd8388790,
      61'd8388791,
      61'd8388792,
      61'd8388793,
      61'd8388794,
      61'd8388795,
      61'd8388796,
      61'd8388797,
      61'd8388798,
      61'd8388799,
      61'd8388800,
      61'd8388801,
      61'd8388802,
      61'd8388803,
      61'd8388804,
      61'd8388805,
      61'd8388806,
      61'd8388807,
      61'd8388808,
      61'd8388809,
      61'd8388810,
      61'd8388811,
      61'd8388812,
      61'd8388813,
      61'd8388814,
      61'd8388815,
      61'd8388816,
      61'd8388817,
      61'd8388818,
      61'd8388819,
      61'd8388820,
      61'd8388821,
      61'd8388822,
      61'd8388823,
      61'd8388824,
      61'd8388825,
      61'd8388826,
      61'd8388827,
      61'd8388828,
      61'd8388829,
      61'd8388830,
      61'd8388831,
      61'd8388832,
      61'd8388833,
      61'd8388834,
      61'd8388835,
      61'd8388836,
      61'd8388837,
      61'd8388838,
      61'd8388839,
      61'd8388840,
      61'd8388841,
      61'd8388842,
      61'd8388843,
      61'd8388844,
      61'd8388845,
      61'd8388846,
      61'd8388847,
      61'd8388848,
      61'd8388849,
      61'd8388850,
      61'd8388851,
      61'd8388852,
      61'd8388853,
      61'd8388854,
      61'd8388855,
      61'd8388856,
      61'd8388857,
      61'd8388858,
      61'd8388859,
      61'd8388860,
      61'd8388861,
      61'd8388862,
      61'd8388863,
      61'd8388864,
      61'd8388865,
      61'd8388866,
      61'd8388867,
      61'd8388868,
      61'd8388869,
      61'd8388870,
      61'd8388871,
      61'd8388872,
      61'd8388873,
      61'd8388874,
      61'd8388875,
      61'd8388876,
      61'd8388877,
      61'd8388878,
      61'd8388879,
      61'd8388880,
      61'd8388881,
      61'd8388882,
      61'd8388883,
      61'd8388884,
      61'd8388885,
      61'd8388886,
      61'd8388887,
      61'd8388888,
      61'd8388889,
      61'd8388890,
      61'd8388891,
      61'd8388892,
      61'd8388893,
      61'd8388894,
      61'd8388895,
      61'd8388896,
      61'd8388897,
      61'd8388898,
      61'd8388899,
      61'd8388900,
      61'd8388901,
      61'd8388902,
      61'd8388903,
      61'd8388904,
      61'd8388905,
      61'd8388906,
      61'd8388907,
      61'd8388908,
      61'd8388909,
      61'd8388910,
      61'd8388911,
      61'd8388912,
      61'd8388913,
      61'd8388914,
      61'd8388915,
      61'd8388916,
      61'd8388917,
      61'd8388918,
      61'd8388919,
      61'd8388920,
      61'd8388921,
      61'd8388922,
      61'd8388923,
      61'd8388924,
      61'd8388925,
      61'd8388926,
      61'd8388927,
      61'd8388928,
      61'd8388929,
      61'd8388930,
      61'd8388931,
      61'd8388932,
      61'd8388933,
      61'd8388934,
      61'd8388935,
      61'd8388936,
      61'd8388937,
      61'd8388938,
      61'd8388939,
      61'd8388940,
      61'd8388941,
      61'd8388942,
      61'd8388943,
      61'd8388944,
      61'd8388945,
      61'd8388946,
      61'd8388947,
      61'd8388948,
      61'd8388949,
      61'd8388950,
      61'd8388951,
      61'd8388952,
      61'd8388953,
      61'd8388954,
      61'd8388955,
      61'd8388956,
      61'd8388957,
      61'd8388958,
      61'd8388959,
      61'd8388960,
      61'd8388961,
      61'd8388962,
      61'd8388963,
      61'd8388964,
      61'd8388965,
      61'd8388966,
      61'd8388967,
      61'd8388968,
      61'd8388969,
      61'd8388970,
      61'd8388971,
      61'd8388972,
      61'd8388973,
      61'd8388974,
      61'd8388975,
      61'd8388976,
      61'd8388977,
      61'd8388978,
      61'd8388979,
      61'd8388980,
      61'd8388981,
      61'd8388982,
      61'd8388983,
      61'd8388984,
      61'd8388985,
      61'd8388986,
      61'd8388987,
      61'd8388988,
      61'd8388989,
      61'd8388990,
      61'd8388991,
      61'd8388992,
      61'd8388993,
      61'd8388994,
      61'd8388995,
      61'd8388996,
      61'd8388997,
      61'd8388998,
      61'd8388999,
      61'd8389000,
      61'd8389001,
      61'd8389002,
      61'd8389003,
      61'd8389004,
      61'd8389005,
      61'd8389006,
      61'd8389007,
      61'd8389008,
      61'd8389009,
      61'd8389010,
      61'd8389011,
      61'd8389012,
      61'd8389013,
      61'd8389014,
      61'd8389015,
      61'd8389016,
      61'd8389017,
      61'd8389018,
      61'd8389019,
      61'd8389020,
      61'd8389021,
      61'd8389022,
      61'd8389023,
      61'd8389024,
      61'd8389025,
      61'd8389026,
      61'd8389027,
      61'd8389028,
      61'd8389029,
      61'd8389030,
      61'd8389031,
      61'd8389032,
      61'd8389033,
      61'd8389034,
      61'd8389035,
      61'd8389036,
      61'd8389037,
      61'd8389038,
      61'd8389039,
      61'd8389040,
      61'd8389041,
      61'd8389042,
      61'd8389043,
      61'd8389044,
      61'd8389045,
      61'd8389046,
      61'd8389047,
      61'd8389048,
      61'd8389049,
      61'd8389050,
      61'd8389051,
      61'd8389052,
      61'd8389053,
      61'd8389054,
      61'd8389055,
      61'd8389056,
      61'd8389057,
      61'd8389058,
      61'd8389059,
      61'd8389060,
      61'd8389061,
      61'd8389062,
      61'd8389063,
      61'd8389064,
      61'd8389065,
      61'd8389066,
      61'd8389067,
      61'd8389068,
      61'd8389069,
      61'd8389070,
      61'd8389071,
      61'd8389072,
      61'd8389073,
      61'd8389074,
      61'd8389075,
      61'd8389076,
      61'd8389077,
      61'd8389078,
      61'd8389079,
      61'd8389080,
      61'd8389081,
      61'd8389082,
      61'd8389083,
      61'd8389084,
      61'd8389085,
      61'd8389086,
      61'd8389087,
      61'd8389088,
      61'd8389089,
      61'd8389090,
      61'd8389091,
      61'd8389092,
      61'd8389093,
      61'd8389094,
      61'd8389095,
      61'd8389096,
      61'd8389097,
      61'd8389098,
      61'd8389099,
      61'd8389100,
      61'd8389101,
      61'd8389102,
      61'd8389103,
      61'd8389104,
      61'd8389105,
      61'd8389106,
      61'd8389107,
      61'd8389108,
      61'd8389109,
      61'd8389110,
      61'd8389111,
      61'd8389112,
      61'd8389113,
      61'd8389114,
      61'd8389115,
      61'd8389116,
      61'd8389117,
      61'd8389118,
      61'd8389119:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 = 32'h0;
      61'd8388619, 61'd8388640, 61'd8388694, 61'd8388708:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h01000000;
      61'd8388620,
      61'd8388622,
      61'd8388624,
      61'd8388634,
      61'd8388636,
      61'd8388638,
      61'd8388648,
      61'd8388662,
      61'd8388664,
      61'd8388669,
      61'd8388675,
      61'd8388700,
      61'd8388702,
      61'd8388717,
      61'd8388719:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h03000000;
      61'd8388623, 61'd8388637, 61'd8388666:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h0F000000;
      61'd8388625, 61'd8388649:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h1B000000;
      61'd8388626:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h732C7261;
      61'd8388627:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h7261622D;
      61'd8388628, 61'd8388650:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h00000076;
      61'd8388629:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h12000000;
      61'd8388630, 61'd8388688:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h62626375;
      61'd8388631, 61'd8388689:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h656B6970;
      61'd8388632:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h00000065;
      61'd8388633:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h73757063;
      61'd8388639:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h2C000000;
      61'd8388641, 61'd8388696, 61'd8388710:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h00000030;
      61'd8388642, 61'd8388644, 61'd8388657, 61'd8388683, 61'd8388685:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h04000000;
      61'd8388643:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h00757063;
      61'd8388646:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h05000000;
      61'd8388647:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h79616B6F;
      61'd8388651:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h0A000000;
      61'd8388652:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h34367672;
      61'd8388653:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h00000073;
      61'd8388654:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h0B000000;
      61'd8388655, 61'd8388667, 61'd8388698:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h63736972;
      61'd8388656:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h00003834;
      61'd8388658:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h50C30000;
      61'd8388659:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h65746E69;
      61'd8388660:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h6F632D74;
      61'd8388661:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h72656C6C;
      61'd8388663:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h79000000;
      61'd8388665:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h8A000000;
      61'd8388668:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h6E692D75;
      61'd8388670:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h9F000000;
      61'd8388671,
      61'd8388672,
      61'd8388681,
      61'd8388684,
      61'd8388686,
      61'd8388707,
      61'd8388721:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h02000000;
      61'd8388673:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h6F6D656D;
      61'd8388674:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h30303030;
      61'd8388676:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h3F000000;
      61'd8388677:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h00007972;
      61'd8388682:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h00636F73;
      61'd8388687:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h21000000;
      61'd8388690:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h6F732D65;
      61'd8388691:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h656C706D;
      61'd8388695:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h30324074;
      61'd8388697:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h0D000000;
      61'd8388699:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h30746E69;
      61'd8388701:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'hAE000000;
      61'd8388703:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h07000000;
      61'd8388709:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h30306340;
      61'd8388711, 61'd8388722:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h09000000;
      61'd8388712:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h3631736E;
      61'd8388718:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'hC2000000;
      61'd8388720:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h69000000;
      61'd8388723:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h73736572;
      61'd8388724:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h2300736C;
      61'd8388725:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h6C65632D;
      61'd8388726:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h61706D6F;
      61'd8388727:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h6F6D0065;
      61'd8388728:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h656D6974;
      61'd8388729:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h6572662D;
      61'd8388730:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h64007963;
      61'd8388731:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h79745F65;
      61'd8388732:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h73006765;
      61'd8388733:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h69720073;
      61'd8388734:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h00617369;
      61'd8388735:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h65707974;
      61'd8388736:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h662D6B63;
      61'd8388737:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h79636E65;
      61'd8388738, 61'd8388740:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h72726574;
      61'd8388739:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h6C6C6563;
      61'd8388741:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h746E6F63;
      61'd8388742:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h70007265;
      61'd8388743:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h7200656C;
      61'd8388744:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h6E690073;
      61'd8388745:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h73747075;
      61'd8388746:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h65646E65;
      61'd8388747:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
	      32'h68732D67;
      default: CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 =
		   32'hAAAAAAAA;
    endcase
  end
  always@(slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_MIN_ETC__q1 or
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2 or
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3)
  begin
    case (slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_MIN_ETC__q1[63:3])
      61'd8388608: data64__h708 = 64'h0202859300000297;
      61'd8388609: data64__h708 = 64'h0182B283F1402573;
      default: data64__h708 =
		   { CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q2,
		     CASE_slave_xactor_f_rd_addrD_OUT_BITS_92_TO_29_ETC__q3 };
    endcase
  end
  always@(slave_xactor_f_rd_addr$D_OUT)
  begin
    case (slave_xactor_f_rd_addr$D_OUT[20:18])
      3'b001:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_20_TO_1_ETC__q4 =
	      slave_xactor_f_rd_addr$D_OUT[29];
      3'b010:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_20_TO_1_ETC__q4 =
	      slave_xactor_f_rd_addr$D_OUT[30:29] != 2'd0;
      3'b011:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_20_TO_1_ETC__q4 =
	      slave_xactor_f_rd_addr$D_OUT[31:29] != 3'd0;
      default: CASE_slave_xactor_f_rd_addrD_OUT_BITS_20_TO_1_ETC__q4 =
		   slave_xactor_f_rd_addr$D_OUT[20:18] != 3'b0;
    endcase
  end
  always@(slave_xactor_f_wr_addr$D_OUT)
  begin
    case (slave_xactor_f_wr_addr$D_OUT[20:18])
      3'b001:
	  CASE_slave_xactor_f_wr_addrD_OUT_BITS_20_TO_1_ETC__q5 =
	      slave_xactor_f_wr_addr$D_OUT[29];
      3'b010:
	  CASE_slave_xactor_f_wr_addrD_OUT_BITS_20_TO_1_ETC__q5 =
	      slave_xactor_f_wr_addr$D_OUT[30:29] != 2'd0;
      3'b011:
	  CASE_slave_xactor_f_wr_addrD_OUT_BITS_20_TO_1_ETC__q5 =
	      slave_xactor_f_wr_addr$D_OUT[31:29] != 3'd0;
      default: CASE_slave_xactor_f_wr_addrD_OUT_BITS_20_TO_1_ETC__q5 =
		   slave_xactor_f_wr_addr$D_OUT[20:18] != 3'b0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_module_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_module_ready$EN)
	  rg_module_ready <= `BSV_ASSIGNMENT_DELAY rg_module_ready$D_IN;
      end
    if (rg_addr_base$EN)
      rg_addr_base <= `BSV_ASSIGNMENT_DELAY rg_addr_base$D_IN;
    if (rg_addr_lim$EN) rg_addr_lim <= `BSV_ASSIGNMENT_DELAY rg_addr_lim$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_addr_base = 64'hAAAAAAAAAAAAAAAA;
    rg_addr_lim = 64'hAAAAAAAAAAAAAAAA;
    rg_module_ready = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	begin
	  v__h888 = $stime;
	  #0;
	end
    v__h882 = v__h888 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$display("%0d: ERROR: Boot_ROM.rl_process_rd_req: unrecognized or misaligned addr",
		 v__h882);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[96:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  IF_slave_xactor_f_rd_addr_first_BITS_20_TO_18__ETC___d31)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	begin
	  v__h8626 = $stime;
	  #0;
	end
    v__h8620 = v__h8626 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$display("%0d: ERROR: Boot_ROM.rl_process_wr_req: unrecognized addr",
		 v__h8620);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[96:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  IF_slave_xactor_f_wr_addr_first__218_BITS_20_T_ETC___d1241)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_addr_map && set_addr_map_addr_base[2:0] != 3'd0)
	begin
	  v__h8915 = $stime;
	  #0;
	end
    v__h8909 = v__h8915 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_addr_map && set_addr_map_addr_base[2:0] != 3'd0)
	$display("%0d: WARNING: Boot_ROM.set_addr_map: addr_base 0x%0h is not 4-Byte-aligned",
		 v__h8909,
		 set_addr_map_addr_base);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_addr_map && set_addr_map_addr_lim[2:0] != 3'd0)
	begin
	  v__h9025 = $stime;
	  #0;
	end
    v__h9019 = v__h9025 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_addr_map && set_addr_map_addr_lim[2:0] != 3'd0)
	$display("%0d: WARNING: Boot_ROM.set_addr_map: addr_lim 0x%0h is not 4-Byte-aligned",
		 v__h9019,
		 set_addr_map_addr_lim);
  end
  // synopsys translate_on
endmodule  // mkFlash

